# cogs/info.py
import discord
from discord.ext import commands
from discord.commands import slash_command, SlashCommandGroup # Import for py-cord slash commands
import datetime

class InfoCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    # --- Prefix Command Group (Optional, you can have individual prefix commands too) ---
    # @commands.group(name="info", invoke_without_command=True)
    # async def info_group(self, ctx):
    #     """Provides information about the bot, server, or users."""
    #     if ctx.invoked_subcommand is None:
    #         await ctx.send("Please specify what info you need: `!info user <member>` or `!info server` or `!info bot`.")

    # --- Prefix Commands ---

    @commands.command(name="ping", aliases=["latency"])
    async def ping_prefix(self, ctx):
        """Checks the bot's latency."""
        latency_ms = round(self.bot.latency * 1000)
        embed = discord.Embed(
            title="üèì Pong!",
            description=f"Latency: **{latency_ms}ms**",
            color=discord.Color.blue()
        )
        embed.set_thumbnail(url=self.bot.user.avatar.url if self.bot.user.avatar else None)
        await ctx.send(embed=embed)

    @commands.command(name="userinfo", aliases=["whois", "user"])
    async def userinfo_prefix(self, ctx, member: discord.Member = None):
        """Shows information about a user. Defaults to yourself."""
        member = member or ctx.author # If no member specified, use the command invoker

        embed = discord.Embed(
            title=f"User Info: {member.display_name}",
            color=member.color if member.color != discord.Color.default() else discord.Color.teal(),
            timestamp=datetime.datetime.now(datetime.timezone.utc)
        )
        embed.set_thumbnail(url=member.avatar.url if member.avatar else None)

        embed.add_field(name="ID", value=member.id, inline=True)
        embed.add_field(name="Name", value=f"{member.name}#{member.discriminator}", inline=True)
        embed.add_field(name="Nickname", value=member.nick if member.nick else "None", inline=True)
        embed.add_field(name="Created Account", value=discord.utils.format_dt(member.created_at, "R"), inline=True)
        embed.add_field(name="Joined Server", value=discord.utils.format_dt(member.joined_at, "R"), inline=True)
        
        # Display roles, excluding @everyone
        roles = [role.mention for role in member.roles if role.name != "@everyone"]
        if roles:
            embed.add_field(name=f"Roles ({len(roles)})", value=" ".join(roles), inline=False)
        else:
            embed.add_field(name="Roles", value="No specific roles", inline=False)

        await ctx.send(embed=embed)

    @commands.command(name="serverinfo", aliases=["guildinfo", "server"])
    async def serverinfo_prefix(self, ctx):
        """Shows information about the current server."""
        guild = ctx.guild
        owner = guild.owner
        
        embed = discord.Embed(
            title=f"Server Info: {guild.name}",
            color=discord.Color.gold(),
            timestamp=datetime.datetime.now(datetime.timezone.utc)
        )
        embed.set_thumbnail(url=guild.icon.url if guild.icon else None)

        embed.add_field(name="ID", value=guild.id, inline=True)
        embed.add_field(name="Owner", value=owner.mention, inline=True)
        embed.add_field(name="Members", value=guild.member_count, inline=True)
        embed.add_field(name="Channels", value=f"Text: {len(guild.text_channels)}\nVoice: {len(guild.voice_channels)}", inline=True)
        embed.add_field(name="Roles", value=len(guild.roles), inline=True)
        embed.add_field(name="Created On", value=discord.utils.format_dt(guild.created_at, "R"), inline=True)
        embed.add_field(name="Verification Level", value=str(guild.verification_level).capitalize(), inline=True)
        embed.add_field(name="Boost Level", value=f"Level {guild.premium_tier} ({guild.premium_subscription_count} boosts)", inline=True)

        await ctx.send(embed=embed)

    # --- Slash Commands ---

    # We'll create a slash command group for 'info'
    info_slash = SlashCommandGroup(name="info", description="Get various information.")

    @info_slash.command(name="ping", description="Checks the bot's latency.")
    async def ping_slash(self, ctx: ApplicationContext): # Use ApplicationContext for py-cord slash commands
        latency_ms = round(self.bot.latency * 1000)
        embed = discord.Embed(
            title="üèì Pong!",
            description=f"Latency: **{latency_ms}ms**",
            color=discord.Color.blue()
        )
        embed.set_thumbnail(url=self.bot.user.avatar.url if self.bot.user.avatar else None)
        await ctx.respond(embed=embed) # Use ctx.respond for slash commands

    @info_slash.command(name="user", description="Shows information about a user.")
    async def userinfo_slash(self, ctx: ApplicationContext, member: discord.Member = None):
        """Shows information about a user. Defaults to yourself."""
        member = member or ctx.author # If no member specified, use the command invoker

        embed = discord.Embed(
            title=f"User Info: {member.display_name}",
            color=member.color if member.color != discord.Color.default() else discord.Color.teal(),
            timestamp=datetime.datetime.now(datetime.timezone.utc)
        )
        embed.set_thumbnail(url=member.avatar.url if member.avatar else None)

        embed.add_field(name="ID", value=member.id, inline=True)
        embed.add_field(name="Name", value=f"{member.name}#{member.discriminator}", inline=True)
        embed.add_field(name="Nickname", value=member.nick if member.nick else "None", inline=True)
        embed.add_field(name="Created Account", value=discord.utils.format_dt(member.created_at, "R"), inline=True)
        embed.add_field(name="Joined Server", value=discord.utils.format_dt(member.joined_at, "R"), inline=True)
        
        # Display roles, excluding @everyone
        roles = [role.mention for role in member.roles if role.name != "@everyone"]
        if roles:
            embed.add_field(name=f"Roles ({len(roles)})", value=" ".join(roles), inline=False)
        else:
            embed.add_field(name="Roles", value="No specific roles", inline=False)

        await ctx.respond(embed=embed)

    @info_slash.command(name="server", description="Shows information about the current server.")
    async def serverinfo_slash(self, ctx: ApplicationContext):
        """Shows information about the current server."""
        guild = ctx.guild
        owner = guild.owner
        
        embed = discord.Embed(
            title=f"Server Info: {guild.name}",
            color=discord.Color.gold(),
            timestamp=datetime.datetime.now(datetime.timezone.utc)
        )
        embed.set_thumbnail(url=guild.icon.url if guild.icon else None)

        embed.add_field(name="ID", value=guild.id, inline=True)
        embed.add_field(name="Owner", value=owner.mention, inline=True)
        embed.add_field(name="Members", value=guild.member_count, inline=True)
        embed.add_field(name="Channels", value=f"Text: {len(guild.text_channels)}\nVoice: {len(guild.voice_channels)}", inline=True)
        embed.add_field(name="Roles", value=len(guild.roles), inline=True)
        embed.add_field(name="Created On", value=discord.utils.format_dt(guild.created_at, "R"), inline=True)
        embed.add_field(name="Verification Level", value=str(guild.verification_level).capitalize(), inline=True)
        embed.add_field(name="Boost Level", value=f"Level {guild.premium_tier} ({guild.premium_subscription_count} boosts)", inline=True)

        await ctx.respond(embed=embed)

def setup(bot):
    bot.add_cog(InfoCog(bot))
